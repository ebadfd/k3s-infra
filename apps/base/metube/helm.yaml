---
apiVersion: v1
kind: Namespace
metadata:
  name: metube
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: metube
  namespace: metube
spec:
  interval: 1m0s
  url: https://helm.ebadfd.tech
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: metube
  namespace: metube
spec:
  chart:
    spec:
      chart: metube
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: metube
      version: v0.2.0
  values:
    image:
      repository: ghcr.io/alexta69/metube
      pullPolicy: IfNotPresent
      tag: "latest"

    replicaCount: 1

    service:
      type: ClusterIP
      port: 8080

    ingress:
      enabled: false

    persistence:
      downloads:
        enabled: true
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 10Gi
        mountPath: /downloads
      state:
        enabled: true
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 1Gi
        mountPath: /downloads/.metube
      temp:
        enabled: true
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 5Gi
        mountPath: /downloads/temp

    config:
      uid: 1000
      gid: 1000
      umask: "022"
      dns:
        enabled: true
        policy: "None"
        nameservers:
          - "8.8.8.8"
        options:
          - name: "single-request-reopen"
      defaultTheme: "auto"
      downloadDir: "/downloads"
      audioDownloadDir: "/downloads"
      downloadDirsIndexable: false
      customDirs: true
      createCustomDirs: true
      customDirsExcludeRegex: "(^|/)[.@].*$"
      stateDir: "/downloads/.metube"
      tempDir: "/downloads"
      deleteFileOnTrashcan: false
      urlPrefix: "/"
      publicHostUrl: ""
      publicHostAudioUrl: ""
      https: false
      outputTemplate: "%(title)s.%(ext)s"
      outputTemplateChapter: "%(title)s - %(section_number)s %(section_title)s.%(ext)s"
      outputTemplatePlaylist: "%(playlist_title)s/%(title)s.%(ext)s"
      defaultOptionPlaylistStrictMode: false
      defaultOptionPlaylistItemLimit: 0
      ytdlOptions: '{"force_ipv4": true}'
      robotsTxt: ""
      downloadMode: "limited"
      maxConcurrentDownloads: 3
      logLevel: "INFO"
      enableAccessLog: false

    # Reverse Proxy Configuration for serving downloads
    reverseProxy:
      enabled: true
      image:
        repository: nginx
        tag: "alpine"
        pullPolicy: IfNotPresent
      port: 8080
      downloadsPath: "/downloads"
      downloadsUrl: "/downloads"
      proxyDomain: "ytube.ebadfd.tech"
      nginxConfig: |
        server {
            listen 8080;
            server_name app;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            
            # Serve downloads directory with proper configuration
            location /downloads/ {
                alias /downloads/;
                autoindex on;
                autoindex_exact_size off;
                autoindex_localtime on;
                add_header Content-Disposition "inline";
                
                # Security for downloads
                location ~* \.(mp4|webm|mkv|avi|mov|wmv|flv|m4v|3gp|ogv|ts|mts|m2ts)$ {
                    add_header Content-Type "video/mp4";
                    add_header Accept-Ranges "bytes";
                }
                
                location ~* \.(mp3|wav|flac|aac|ogg|m4a|wma)$ {
                    add_header Content-Type "audio/mpeg";
                    add_header Accept-Ranges "bytes";
                }
                
                # Prevent access to hidden files
                location ~ /\. {
                    deny all;
                }
            }
            
            # Proxy everything else to the main application
            location / {
                proxy_pass http://localhost:8081;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
                
                # WebSocket support
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                
                # Timeouts
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }

    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 256Mi

    livenessProbe:
      httpGet:
        path: /
        port: http
      initialDelaySeconds: 30
      periodSeconds: 10

    readinessProbe:
      httpGet:
        path: /
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80

  interval: 1m0s
